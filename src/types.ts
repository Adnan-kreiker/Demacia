import { App } from 'vue'
import { Router, RouteRecordRaw } from 'vue-router'
import { HeadClient } from '@vueuse/head'

interface AppContext<HasRouter extends boolean = true> {
  app: App<Element>
  router: HasRouter extends true ? Router : undefined
  routes: HasRouter extends true ? RouteRecordRaw[] : undefined
  head: HeadClient | undefined
}

export type UserModule = (ctx: AppContext) => void

export interface Champion {
  version: string
  id: string
  key: string
  name: string
  title: string
  blurb: string
  info: {
    attack: number
    defense: number
    magic: number
    difficulty: number
  }
  image: {
    full: string
    sprite: string
    group: string
    x: number
    y: number
    w: number
    h: number
  }
  tags: string[]
  partype: string
  stats: { [key: string]: number }
}

// Generated by https://quicktype.io
//
// To change quicktype's target language, run command:
//
//   "Set quicktype target language"
export interface Leveltip {
  label: string[]
  effect: string[]
}
export interface Datavalues {
}

export interface Skin {
  id: string
  num: number
  name: string
  chromas: boolean
}
export interface Image {
  full: string
  sprite: string
  group: string
  x: number
  y: number
  w: number
  h: number
}
export interface Spell {
  id: string
  name: string
  description: string
  tooltip: string
  leveltip: Leveltip
  maxrank: number
  cooldown: number[]
  cooldownBurn: string
  cost: number[]
  costBurn: string
  datavalues: Datavalues
  effect: Array<number[] | null>
  effectBurn: Array<null | string>
  vars: any[]
  costType: string
  maxammo: string
  range: number[]
  rangeBurn: string
  image: Image
  resource: string
}
export interface Info {
  attack: number
  defense: number
  magic: number
  difficulty: number
}
export interface ChampionInfo {
  id: string
  key: string
  name: string
  title: string
  image: {
    full: string
    sprite: string
    group: string
    x: number
    y: number
    w: number
    h: number
  }
  skins: Skin[]
  lore: string
  blurb: string
  allytips: string[]
  enemytips: string[]
  tags: string[]
  partype: string
  info: Info
  stats: { [key: string]: number }
  spells: Spell[]
  passive: {
    name: string
    description: string
    image: Image
  }
  recommended: any[]
}

export interface Passive {
  name: string
  description: string
  image: Image
}

export interface Summoner {
  id: string
  accountId: string
  puuid: string
  name: string
  profileIconId: number
  revisionDate: number
  summonerLevel: number
}

/// ////////////////////////////////////////////////
export interface Metadata {
  dataVersion: string
  matchId: string
  participants: string[]
}

export interface StatPerks {
  defense: number
  flex: number
  offense: number
}

export enum Description {
  PrimaryStyle = 'primaryStyle',
  SubStyle = 'subStyle',
}

export interface Selection {
  perk: number
  var1: number
  var2: number
  var3: number
}

export interface Baron {
  first: boolean
  kills: number
}
export interface Ban {
  championId: number
  pickTurn: number
}
export interface Style {
  description: Description
  selections: Selection[]
  style: number
}

export interface Perks {
  statPerks: StatPerks
  styles: Style[]
}
export interface Participant {
  assists: number
  baronKills: number
  bountyLevel: number
  champExperience: number
  champLevel: number
  championId: number
  championName: string
  championTransform: number
  consumablesPurchased: number
  damageDealtToBuildings: number
  damageDealtToObjectives: number
  damageDealtToTurrets: number
  damageSelfMitigated: number
  deaths: number
  detectorWardsPlaced: number
  doubleKills: number
  dragonKills: number
  firstBloodAssist: boolean
  firstBloodKill: boolean
  firstTowerAssist: boolean
  firstTowerKill: boolean
  gameEndedInEarlySurrender: boolean
  gameEndedInSurrender: boolean
  goldEarned: number
  goldSpent: number
  individualPosition: string
  inhibitorKills: number
  inhibitorsLost: number
  item0: number
  item1: number
  item2: number
  item3: number
  item4: number
  item5: number
  item6: number
  itemsPurchased: number
  killingSprees: number
  kills: number
  lane: string
  largestCriticalStrike: number
  largestKillingSpree: number
  largestMultiKill: number
  longestTimeSpentLiving: number
  magicDamageDealt: number
  magicDamageDealtToChampions: number
  magicDamageTaken: number
  neutralMinionsKilled: number
  nexusKills: number
  nexusLost: number
  objectivesStolen: number
  objectivesStolenAssists: number
  participantId: number
  pentaKills: number
  perks: Perks
  physicalDamageDealt: number
  physicalDamageDealtToChampions: number
  physicalDamageTaken: number
  profileIcon: number
  puuid: string
  quadraKills: number
  riotIdName: string
  riotIdTagline: string
  role: string
  sightWardsBoughtInGame: number
  spell1Casts: number
  spell2Casts: number
  spell3Casts: number
  spell4Casts: number
  summoner1Casts: number
  summoner1Id: number
  summoner2Casts: number
  summoner2Id: number
  summonerId: string
  summonerLevel: number
  summonerName: string
  teamEarlySurrendered: boolean
  teamId: number
  teamPosition: string
  timeCCingOthers: number
  timePlayed: number
  totalDamageDealt: number
  totalDamageDealtToChampions: number
  totalDamageShieldedOnTeammates: number
  totalDamageTaken: number
  totalHeal: number
  totalHealsOnTeammates: number
  totalMinionsKilled: number
  totalTimeCCDealt: number
  totalTimeSpentDead: number
  totalUnitsHealed: number
  tripleKills: number
  trueDamageDealt: number
  trueDamageDealtToChampions: number
  trueDamageTaken: number
  turretKills: number
  turretsLost: number
  unrealKills: number
  visionScore: number
  visionWardsBoughtInGame: number
  wardsKilled: number
  wardsPlaced: number
  win: boolean
}
export interface Objectives {
  baron: Baron
  champion: Baron
  dragon: Baron
  inhibitor: Baron
  riftHerald: Baron
  tower: Baron
}
export interface Team {
  bans: Ban[]
  objectives: Objectives
  teamId: number
  win: boolean
}

export interface MatchInformation {
  gameCreation: number
  gameDuration: number
  gameId: number
  gameMode: string
  gameName: string
  gameStartTimestamp: number
  gameType: string
  gameVersion: string
  mapId: number
  participants: Participant[]
  platformId: string
  queueId: number
  teams: Team[]
}

export interface MatchInfo {
  metadata: Metadata
  info: MatchInformation
  show: boolean
}


// export type SummonerRankedInfo = RankedData[]

export interface RankedData {
  leagueId: string;
  queueType: string;
  tier: string;
  rank: string;
  summonerId: string;
  summonerName: string;
  leaguePoints: number;
  wins: number;
  losses: number;
  veteran: boolean;
  inactive: boolean;
  freshBlood: boolean;
  hotStreak: boolean;
}


export enum QueueTypes {
  RANKED_SOLO_5x5 = 'RANKED_SOLO_5x5',
  RANKED_FLEX_SR = 'RANKED_FLEX_SR',
  RANKED_FLEX_TT = 'RANKED_FLEX_TT',
}

export type Ranks = 'challengerleagues' | 'grandMasterleagues' | 'masterleagues'

export type Tier = 'CHALLENGER' | 'GRANDMASTER' | 'MASTER' | 'DIAMOND' | 'PLATINUM' | 'GOLD' | 'SILVER' | 'BRONZE' | 'IRON'

// export interface ChallengerPlayer {
//   summonerId:   string;
//   summonerName: string;
//   leaguePoints: number;
//   rank:         string;
//   wins:         number;
//   losses:       number;
//   veteran:      boolean;
//   inactive:     boolean;
//   freshBlood:   boolean;
//   hotStreak:    boolean;
// }

export interface ChallengerPlayers {
  tier: string;
  leagueId: string;
  queue: string;
  name: string;
  entries: ChallengerPlayer[];
}

export interface ChallengerPlayer {
  summonerId: string;
  summonerName: string;
  leaguePoints: number;
  rank: string;
  wins: number;
  losses: number;
  veteran: boolean;
  inactive: boolean;
  freshBlood: boolean;
  hotStreak: boolean;
}

export interface ChallengerPlayer {
  summonerId: string;
  summonerName: string;
  leaguePoints: number;
  rank: string;
  wins: number;
  losses: number;
  veteran: boolean;
  inactive: boolean;
  freshBlood: boolean;
  hotStreak: boolean;
}

export interface ChallengerPlayerWithIndex {
  summonerId: string;
  summonerName: string;
  leaguePoints: number;
  rank: string;
  wins: number;
  losses: number;
  veteran: boolean;
  inactive: boolean;
  freshBlood: boolean;
  hotStreak: boolean;
  idx: number;
}
export interface ChallengerPlayerWithAdditionalData {
  summonerId: string;
  summonerName: string;
  leaguePoints: number;
  rank: string;
  wins: number;
  losses: number;
  veteran: boolean;
  inactive: boolean;
  freshBlood: boolean;
  hotStreak: boolean;
  id: string
  accountId: string
  puuid: string
  name: string
  profileIconId: number
  revisionDate: number
  summonerLevel: number
  idx: number
}

